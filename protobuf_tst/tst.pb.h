// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tst.proto

#ifndef PROTOBUF_tst_2eproto__INCLUDED
#define PROTOBUF_tst_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_tst_2eproto();
void protobuf_AssignDesc_tst_2eproto();
void protobuf_ShutdownFile_tst_2eproto();

class ProHead;
class ExtCliData;
class ProSyn;
class ProSynOk;
class ProFin;
class ProGateCut;
class ProReset;
class MsgData;
class MsgData_Entry;
class ProUnreMsg;
class ProReMsg;

enum ProHead_ProType {
  ProHead_ProType_TYPE_SYN = 1,
  ProHead_ProType_TYPE_SYNOK = 2,
  ProHead_ProType_TYPE_FIN = 3,
  ProHead_ProType_TYPE_RESET = 4,
  ProHead_ProType_TYPE_GATE_CUT = 5,
  ProHead_ProType_TYPE_UPIDX = 6,
  ProHead_ProType_TYPE_RE_MSG = 7,
  ProHead_ProType_TYPE_UNRE_MSG = 8
};
bool ProHead_ProType_IsValid(int value);
const ProHead_ProType ProHead_ProType_ProType_MIN = ProHead_ProType_TYPE_SYN;
const ProHead_ProType ProHead_ProType_ProType_MAX = ProHead_ProType_TYPE_UNRE_MSG;
const int ProHead_ProType_ProType_ARRAYSIZE = ProHead_ProType_ProType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProHead_ProType_descriptor();
inline const ::std::string& ProHead_ProType_Name(ProHead_ProType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProHead_ProType_descriptor(), value);
}
inline bool ProHead_ProType_Parse(
    const ::std::string& name, ProHead_ProType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProHead_ProType>(
    ProHead_ProType_descriptor(), name, value);
}
// ===================================================================

class ProHead : public ::google::protobuf::Message {
 public:
  ProHead();
  virtual ~ProHead();

  ProHead(const ProHead& from);

  inline ProHead& operator=(const ProHead& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProHead& default_instance();

  void Swap(ProHead* other);

  // implements Message ----------------------------------------------

  ProHead* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProHead& from);
  void MergeFrom(const ProHead& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ProHead_ProType ProType;
  static const ProType TYPE_SYN = ProHead_ProType_TYPE_SYN;
  static const ProType TYPE_SYNOK = ProHead_ProType_TYPE_SYNOK;
  static const ProType TYPE_FIN = ProHead_ProType_TYPE_FIN;
  static const ProType TYPE_RESET = ProHead_ProType_TYPE_RESET;
  static const ProType TYPE_GATE_CUT = ProHead_ProType_TYPE_GATE_CUT;
  static const ProType TYPE_UPIDX = ProHead_ProType_TYPE_UPIDX;
  static const ProType TYPE_RE_MSG = ProHead_ProType_TYPE_RE_MSG;
  static const ProType TYPE_UNRE_MSG = ProHead_ProType_TYPE_UNRE_MSG;
  static inline bool ProType_IsValid(int value) {
    return ProHead_ProType_IsValid(value);
  }
  static const ProType ProType_MIN =
    ProHead_ProType_ProType_MIN;
  static const ProType ProType_MAX =
    ProHead_ProType_ProType_MAX;
  static const int ProType_ARRAYSIZE =
    ProHead_ProType_ProType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProType_descriptor() {
    return ProHead_ProType_descriptor();
  }
  static inline const ::std::string& ProType_Name(ProType value) {
    return ProHead_ProType_Name(value);
  }
  static inline bool ProType_Parse(const ::std::string& name,
      ProType* value) {
    return ProHead_ProType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int64 conn = 2;
  inline bool has_conn() const;
  inline void clear_conn();
  static const int kConnFieldNumber = 2;
  inline ::google::protobuf::int64 conn() const;
  inline void set_conn(::google::protobuf::int64 value);

  // optional int32 sid = 3;
  inline bool has_sid() const;
  inline void clear_sid();
  static const int kSidFieldNumber = 3;
  inline ::google::protobuf::int32 sid() const;
  inline void set_sid(::google::protobuf::int32 value);

  // optional int32 rid = 4;
  inline bool has_rid() const;
  inline void clear_rid();
  static const int kRidFieldNumber = 4;
  inline ::google::protobuf::int32 rid() const;
  inline void set_rid(::google::protobuf::int32 value);

  // optional int64 uid = 5;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 5;
  inline ::google::protobuf::int64 uid() const;
  inline void set_uid(::google::protobuf::int64 value);

  // optional bytes sub_pro = 1001;
  inline bool has_sub_pro() const;
  inline void clear_sub_pro();
  static const int kSubProFieldNumber = 1001;
  inline const ::std::string& sub_pro() const;
  inline void set_sub_pro(const ::std::string& value);
  inline void set_sub_pro(const char* value);
  inline void set_sub_pro(const void* value, size_t size);
  inline ::std::string* mutable_sub_pro();
  inline ::std::string* release_sub_pro();
  inline void set_allocated_sub_pro(::std::string* sub_pro);

  // @@protoc_insertion_point(class_scope:ProHead)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_conn();
  inline void clear_has_conn();
  inline void set_has_sid();
  inline void clear_has_sid();
  inline void set_has_rid();
  inline void clear_has_rid();
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_sub_pro();
  inline void clear_has_sub_pro();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 conn_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 sid_;
  ::google::protobuf::int64 uid_;
  ::std::string* sub_pro_;
  ::google::protobuf::int32 rid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_tst_2eproto();
  friend void protobuf_AssignDesc_tst_2eproto();
  friend void protobuf_ShutdownFile_tst_2eproto();

  void InitAsDefaultInstance();
  static ProHead* default_instance_;
};
// -------------------------------------------------------------------

class ExtCliData : public ::google::protobuf::Message {
 public:
  ExtCliData();
  virtual ~ExtCliData();

  ExtCliData(const ExtCliData& from);

  inline ExtCliData& operator=(const ExtCliData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExtCliData& default_instance();

  void Swap(ExtCliData* other);

  // implements Message ----------------------------------------------

  ExtCliData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ExtCliData& from);
  void MergeFrom(const ExtCliData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // required bytes value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const void* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:ExtCliData)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* key_;
  ::std::string* value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_tst_2eproto();
  friend void protobuf_AssignDesc_tst_2eproto();
  friend void protobuf_ShutdownFile_tst_2eproto();

  void InitAsDefaultInstance();
  static ExtCliData* default_instance_;
};
// -------------------------------------------------------------------

class ProSyn : public ::google::protobuf::Message {
 public:
  ProSyn();
  virtual ~ProSyn();

  ProSyn(const ProSyn& from);

  inline ProSyn& operator=(const ProSyn& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProSyn& default_instance();

  void Swap(ProSyn* other);

  // implements Message ----------------------------------------------

  ProSyn* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProSyn& from);
  void MergeFrom(const ProSyn& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 cli_tp = 1;
  inline bool has_cli_tp() const;
  inline void clear_cli_tp();
  static const int kCliTpFieldNumber = 1;
  inline ::google::protobuf::int32 cli_tp() const;
  inline void set_cli_tp(::google::protobuf::int32 value);

  // optional bytes cli_ver = 2;
  inline bool has_cli_ver() const;
  inline void clear_cli_ver();
  static const int kCliVerFieldNumber = 2;
  inline const ::std::string& cli_ver() const;
  inline void set_cli_ver(const ::std::string& value);
  inline void set_cli_ver(const char* value);
  inline void set_cli_ver(const void* value, size_t size);
  inline ::std::string* mutable_cli_ver();
  inline ::std::string* release_cli_ver();
  inline void set_allocated_cli_ver(::std::string* cli_ver);

  // optional bytes ticket = 3;
  inline bool has_ticket() const;
  inline void clear_ticket();
  static const int kTicketFieldNumber = 3;
  inline const ::std::string& ticket() const;
  inline void set_ticket(const ::std::string& value);
  inline void set_ticket(const char* value);
  inline void set_ticket(const void* value, size_t size);
  inline ::std::string* mutable_ticket();
  inline ::std::string* release_ticket();
  inline void set_allocated_ticket(::std::string* ticket);

  // repeated .ExtCliData ext = 1001;
  inline int ext_size() const;
  inline void clear_ext();
  static const int kExtFieldNumber = 1001;
  inline const ::ExtCliData& ext(int index) const;
  inline ::ExtCliData* mutable_ext(int index);
  inline ::ExtCliData* add_ext();
  inline const ::google::protobuf::RepeatedPtrField< ::ExtCliData >&
      ext() const;
  inline ::google::protobuf::RepeatedPtrField< ::ExtCliData >*
      mutable_ext();

  // @@protoc_insertion_point(class_scope:ProSyn)
 private:
  inline void set_has_cli_tp();
  inline void clear_has_cli_tp();
  inline void set_has_cli_ver();
  inline void clear_has_cli_ver();
  inline void set_has_ticket();
  inline void clear_has_ticket();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* cli_ver_;
  ::std::string* ticket_;
  ::google::protobuf::RepeatedPtrField< ::ExtCliData > ext_;
  ::google::protobuf::int32 cli_tp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_tst_2eproto();
  friend void protobuf_AssignDesc_tst_2eproto();
  friend void protobuf_ShutdownFile_tst_2eproto();

  void InitAsDefaultInstance();
  static ProSyn* default_instance_;
};
// -------------------------------------------------------------------

class ProSynOk : public ::google::protobuf::Message {
 public:
  ProSynOk();
  virtual ~ProSynOk();

  ProSynOk(const ProSynOk& from);

  inline ProSynOk& operator=(const ProSynOk& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProSynOk& default_instance();

  void Swap(ProSynOk* other);

  // implements Message ----------------------------------------------

  ProSynOk* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProSynOk& from);
  void MergeFrom(const ProSynOk& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 cli_tp = 1;
  inline bool has_cli_tp() const;
  inline void clear_cli_tp();
  static const int kCliTpFieldNumber = 1;
  inline ::google::protobuf::int32 cli_tp() const;
  inline void set_cli_tp(::google::protobuf::int32 value);

  // optional bytes cli_ver = 2;
  inline bool has_cli_ver() const;
  inline void clear_cli_ver();
  static const int kCliVerFieldNumber = 2;
  inline const ::std::string& cli_ver() const;
  inline void set_cli_ver(const ::std::string& value);
  inline void set_cli_ver(const char* value);
  inline void set_cli_ver(const void* value, size_t size);
  inline ::std::string* mutable_cli_ver();
  inline ::std::string* release_cli_ver();
  inline void set_allocated_cli_ver(::std::string* cli_ver);

  // repeated .ExtCliData ext = 1001;
  inline int ext_size() const;
  inline void clear_ext();
  static const int kExtFieldNumber = 1001;
  inline const ::ExtCliData& ext(int index) const;
  inline ::ExtCliData* mutable_ext(int index);
  inline ::ExtCliData* add_ext();
  inline const ::google::protobuf::RepeatedPtrField< ::ExtCliData >&
      ext() const;
  inline ::google::protobuf::RepeatedPtrField< ::ExtCliData >*
      mutable_ext();

  // @@protoc_insertion_point(class_scope:ProSynOk)
 private:
  inline void set_has_cli_tp();
  inline void clear_has_cli_tp();
  inline void set_has_cli_ver();
  inline void clear_has_cli_ver();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* cli_ver_;
  ::google::protobuf::RepeatedPtrField< ::ExtCliData > ext_;
  ::google::protobuf::int32 cli_tp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_tst_2eproto();
  friend void protobuf_AssignDesc_tst_2eproto();
  friend void protobuf_ShutdownFile_tst_2eproto();

  void InitAsDefaultInstance();
  static ProSynOk* default_instance_;
};
// -------------------------------------------------------------------

class ProFin : public ::google::protobuf::Message {
 public:
  ProFin();
  virtual ~ProFin();

  ProFin(const ProFin& from);

  inline ProFin& operator=(const ProFin& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProFin& default_instance();

  void Swap(ProFin* other);

  // implements Message ----------------------------------------------

  ProFin* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProFin& from);
  void MergeFrom(const ProFin& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ProFin)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_tst_2eproto();
  friend void protobuf_AssignDesc_tst_2eproto();
  friend void protobuf_ShutdownFile_tst_2eproto();

  void InitAsDefaultInstance();
  static ProFin* default_instance_;
};
// -------------------------------------------------------------------

class ProGateCut : public ::google::protobuf::Message {
 public:
  ProGateCut();
  virtual ~ProGateCut();

  ProGateCut(const ProGateCut& from);

  inline ProGateCut& operator=(const ProGateCut& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProGateCut& default_instance();

  void Swap(ProGateCut* other);

  // implements Message ----------------------------------------------

  ProGateCut* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProGateCut& from);
  void MergeFrom(const ProGateCut& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ProGateCut)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_tst_2eproto();
  friend void protobuf_AssignDesc_tst_2eproto();
  friend void protobuf_ShutdownFile_tst_2eproto();

  void InitAsDefaultInstance();
  static ProGateCut* default_instance_;
};
// -------------------------------------------------------------------

class ProReset : public ::google::protobuf::Message {
 public:
  ProReset();
  virtual ~ProReset();

  ProReset(const ProReset& from);

  inline ProReset& operator=(const ProReset& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProReset& default_instance();

  void Swap(ProReset* other);

  // implements Message ----------------------------------------------

  ProReset* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProReset& from);
  void MergeFrom(const ProReset& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:ProReset)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_tst_2eproto();
  friend void protobuf_AssignDesc_tst_2eproto();
  friend void protobuf_ShutdownFile_tst_2eproto();

  void InitAsDefaultInstance();
  static ProReset* default_instance_;
};
// -------------------------------------------------------------------

class MsgData_Entry : public ::google::protobuf::Message {
 public:
  MsgData_Entry();
  virtual ~MsgData_Entry();

  MsgData_Entry(const MsgData_Entry& from);

  inline MsgData_Entry& operator=(const MsgData_Entry& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgData_Entry& default_instance();

  void Swap(MsgData_Entry* other);

  // implements Message ----------------------------------------------

  MsgData_Entry* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgData_Entry& from);
  void MergeFrom(const MsgData_Entry& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // required bytes data = 2;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::std::string& data() const;
  inline void set_data(const ::std::string& value);
  inline void set_data(const char* value);
  inline void set_data(const void* value, size_t size);
  inline ::std::string* mutable_data();
  inline ::std::string* release_data();
  inline void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:MsgData.Entry)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* data_;
  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_tst_2eproto();
  friend void protobuf_AssignDesc_tst_2eproto();
  friend void protobuf_ShutdownFile_tst_2eproto();

  void InitAsDefaultInstance();
  static MsgData_Entry* default_instance_;
};
// -------------------------------------------------------------------

class MsgData : public ::google::protobuf::Message {
 public:
  MsgData();
  virtual ~MsgData();

  MsgData(const MsgData& from);

  inline MsgData& operator=(const MsgData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgData& default_instance();

  void Swap(MsgData* other);

  // implements Message ----------------------------------------------

  MsgData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgData& from);
  void MergeFrom(const MsgData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef MsgData_Entry Entry;

  // accessors -------------------------------------------------------

  // repeated .MsgData.Entry entrys = 1;
  inline int entrys_size() const;
  inline void clear_entrys();
  static const int kEntrysFieldNumber = 1;
  inline const ::MsgData_Entry& entrys(int index) const;
  inline ::MsgData_Entry* mutable_entrys(int index);
  inline ::MsgData_Entry* add_entrys();
  inline const ::google::protobuf::RepeatedPtrField< ::MsgData_Entry >&
      entrys() const;
  inline ::google::protobuf::RepeatedPtrField< ::MsgData_Entry >*
      mutable_entrys();

  // @@protoc_insertion_point(class_scope:MsgData)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::MsgData_Entry > entrys_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_tst_2eproto();
  friend void protobuf_AssignDesc_tst_2eproto();
  friend void protobuf_ShutdownFile_tst_2eproto();

  void InitAsDefaultInstance();
  static MsgData* default_instance_;
};
// -------------------------------------------------------------------

class ProUnreMsg : public ::google::protobuf::Message {
 public:
  ProUnreMsg();
  virtual ~ProUnreMsg();

  ProUnreMsg(const ProUnreMsg& from);

  inline ProUnreMsg& operator=(const ProUnreMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProUnreMsg& default_instance();

  void Swap(ProUnreMsg* other);

  // implements Message ----------------------------------------------

  ProUnreMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProUnreMsg& from);
  void MergeFrom(const ProUnreMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 comp_tp = 1;
  inline bool has_comp_tp() const;
  inline void clear_comp_tp();
  static const int kCompTpFieldNumber = 1;
  inline ::google::protobuf::int32 comp_tp() const;
  inline void set_comp_tp(::google::protobuf::int32 value);

  // optional bytes msgs = 2;
  inline bool has_msgs() const;
  inline void clear_msgs();
  static const int kMsgsFieldNumber = 2;
  inline const ::std::string& msgs() const;
  inline void set_msgs(const ::std::string& value);
  inline void set_msgs(const char* value);
  inline void set_msgs(const void* value, size_t size);
  inline ::std::string* mutable_msgs();
  inline ::std::string* release_msgs();
  inline void set_allocated_msgs(::std::string* msgs);

  // @@protoc_insertion_point(class_scope:ProUnreMsg)
 private:
  inline void set_has_comp_tp();
  inline void clear_has_comp_tp();
  inline void set_has_msgs();
  inline void clear_has_msgs();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msgs_;
  ::google::protobuf::int32 comp_tp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_tst_2eproto();
  friend void protobuf_AssignDesc_tst_2eproto();
  friend void protobuf_ShutdownFile_tst_2eproto();

  void InitAsDefaultInstance();
  static ProUnreMsg* default_instance_;
};
// -------------------------------------------------------------------

class ProReMsg : public ::google::protobuf::Message {
 public:
  ProReMsg();
  virtual ~ProReMsg();

  ProReMsg(const ProReMsg& from);

  inline ProReMsg& operator=(const ProReMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProReMsg& default_instance();

  void Swap(ProReMsg* other);

  // implements Message ----------------------------------------------

  ProReMsg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ProReMsg& from);
  void MergeFrom(const ProReMsg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 comp_tp = 1;
  inline bool has_comp_tp() const;
  inline void clear_comp_tp();
  static const int kCompTpFieldNumber = 1;
  inline ::google::protobuf::int32 comp_tp() const;
  inline void set_comp_tp(::google::protobuf::int32 value);

  // optional bytes msgs = 2;
  inline bool has_msgs() const;
  inline void clear_msgs();
  static const int kMsgsFieldNumber = 2;
  inline const ::std::string& msgs() const;
  inline void set_msgs(const ::std::string& value);
  inline void set_msgs(const char* value);
  inline void set_msgs(const void* value, size_t size);
  inline ::std::string* mutable_msgs();
  inline ::std::string* release_msgs();
  inline void set_allocated_msgs(::std::string* msgs);

  // @@protoc_insertion_point(class_scope:ProReMsg)
 private:
  inline void set_has_comp_tp();
  inline void clear_has_comp_tp();
  inline void set_has_msgs();
  inline void clear_has_msgs();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* msgs_;
  ::google::protobuf::int32 comp_tp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_tst_2eproto();
  friend void protobuf_AssignDesc_tst_2eproto();
  friend void protobuf_ShutdownFile_tst_2eproto();

  void InitAsDefaultInstance();
  static ProReMsg* default_instance_;
};
// ===================================================================


// ===================================================================

// ProHead

// required int32 type = 1;
inline bool ProHead::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProHead::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProHead::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProHead::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 ProHead::type() const {
  return type_;
}
inline void ProHead::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int64 conn = 2;
inline bool ProHead::has_conn() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProHead::set_has_conn() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProHead::clear_has_conn() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProHead::clear_conn() {
  conn_ = GOOGLE_LONGLONG(0);
  clear_has_conn();
}
inline ::google::protobuf::int64 ProHead::conn() const {
  return conn_;
}
inline void ProHead::set_conn(::google::protobuf::int64 value) {
  set_has_conn();
  conn_ = value;
}

// optional int32 sid = 3;
inline bool ProHead::has_sid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProHead::set_has_sid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProHead::clear_has_sid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProHead::clear_sid() {
  sid_ = 0;
  clear_has_sid();
}
inline ::google::protobuf::int32 ProHead::sid() const {
  return sid_;
}
inline void ProHead::set_sid(::google::protobuf::int32 value) {
  set_has_sid();
  sid_ = value;
}

// optional int32 rid = 4;
inline bool ProHead::has_rid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProHead::set_has_rid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProHead::clear_has_rid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProHead::clear_rid() {
  rid_ = 0;
  clear_has_rid();
}
inline ::google::protobuf::int32 ProHead::rid() const {
  return rid_;
}
inline void ProHead::set_rid(::google::protobuf::int32 value) {
  set_has_rid();
  rid_ = value;
}

// optional int64 uid = 5;
inline bool ProHead::has_uid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProHead::set_has_uid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProHead::clear_has_uid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProHead::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
  clear_has_uid();
}
inline ::google::protobuf::int64 ProHead::uid() const {
  return uid_;
}
inline void ProHead::set_uid(::google::protobuf::int64 value) {
  set_has_uid();
  uid_ = value;
}

// optional bytes sub_pro = 1001;
inline bool ProHead::has_sub_pro() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProHead::set_has_sub_pro() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProHead::clear_has_sub_pro() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProHead::clear_sub_pro() {
  if (sub_pro_ != &::google::protobuf::internal::kEmptyString) {
    sub_pro_->clear();
  }
  clear_has_sub_pro();
}
inline const ::std::string& ProHead::sub_pro() const {
  return *sub_pro_;
}
inline void ProHead::set_sub_pro(const ::std::string& value) {
  set_has_sub_pro();
  if (sub_pro_ == &::google::protobuf::internal::kEmptyString) {
    sub_pro_ = new ::std::string;
  }
  sub_pro_->assign(value);
}
inline void ProHead::set_sub_pro(const char* value) {
  set_has_sub_pro();
  if (sub_pro_ == &::google::protobuf::internal::kEmptyString) {
    sub_pro_ = new ::std::string;
  }
  sub_pro_->assign(value);
}
inline void ProHead::set_sub_pro(const void* value, size_t size) {
  set_has_sub_pro();
  if (sub_pro_ == &::google::protobuf::internal::kEmptyString) {
    sub_pro_ = new ::std::string;
  }
  sub_pro_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProHead::mutable_sub_pro() {
  set_has_sub_pro();
  if (sub_pro_ == &::google::protobuf::internal::kEmptyString) {
    sub_pro_ = new ::std::string;
  }
  return sub_pro_;
}
inline ::std::string* ProHead::release_sub_pro() {
  clear_has_sub_pro();
  if (sub_pro_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sub_pro_;
    sub_pro_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ProHead::set_allocated_sub_pro(::std::string* sub_pro) {
  if (sub_pro_ != &::google::protobuf::internal::kEmptyString) {
    delete sub_pro_;
  }
  if (sub_pro) {
    set_has_sub_pro();
    sub_pro_ = sub_pro;
  } else {
    clear_has_sub_pro();
    sub_pro_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ExtCliData

// required string key = 1;
inline bool ExtCliData::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExtCliData::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ExtCliData::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ExtCliData::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& ExtCliData::key() const {
  return *key_;
}
inline void ExtCliData::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void ExtCliData::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void ExtCliData::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ExtCliData::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* ExtCliData::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ExtCliData::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes value = 2;
inline bool ExtCliData::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ExtCliData::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ExtCliData::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ExtCliData::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& ExtCliData::value() const {
  return *value_;
}
inline void ExtCliData::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void ExtCliData::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void ExtCliData::set_value(const void* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ExtCliData::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* ExtCliData::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ExtCliData::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ProSyn

// optional int32 cli_tp = 1;
inline bool ProSyn::has_cli_tp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProSyn::set_has_cli_tp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProSyn::clear_has_cli_tp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProSyn::clear_cli_tp() {
  cli_tp_ = 0;
  clear_has_cli_tp();
}
inline ::google::protobuf::int32 ProSyn::cli_tp() const {
  return cli_tp_;
}
inline void ProSyn::set_cli_tp(::google::protobuf::int32 value) {
  set_has_cli_tp();
  cli_tp_ = value;
}

// optional bytes cli_ver = 2;
inline bool ProSyn::has_cli_ver() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProSyn::set_has_cli_ver() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProSyn::clear_has_cli_ver() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProSyn::clear_cli_ver() {
  if (cli_ver_ != &::google::protobuf::internal::kEmptyString) {
    cli_ver_->clear();
  }
  clear_has_cli_ver();
}
inline const ::std::string& ProSyn::cli_ver() const {
  return *cli_ver_;
}
inline void ProSyn::set_cli_ver(const ::std::string& value) {
  set_has_cli_ver();
  if (cli_ver_ == &::google::protobuf::internal::kEmptyString) {
    cli_ver_ = new ::std::string;
  }
  cli_ver_->assign(value);
}
inline void ProSyn::set_cli_ver(const char* value) {
  set_has_cli_ver();
  if (cli_ver_ == &::google::protobuf::internal::kEmptyString) {
    cli_ver_ = new ::std::string;
  }
  cli_ver_->assign(value);
}
inline void ProSyn::set_cli_ver(const void* value, size_t size) {
  set_has_cli_ver();
  if (cli_ver_ == &::google::protobuf::internal::kEmptyString) {
    cli_ver_ = new ::std::string;
  }
  cli_ver_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProSyn::mutable_cli_ver() {
  set_has_cli_ver();
  if (cli_ver_ == &::google::protobuf::internal::kEmptyString) {
    cli_ver_ = new ::std::string;
  }
  return cli_ver_;
}
inline ::std::string* ProSyn::release_cli_ver() {
  clear_has_cli_ver();
  if (cli_ver_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cli_ver_;
    cli_ver_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ProSyn::set_allocated_cli_ver(::std::string* cli_ver) {
  if (cli_ver_ != &::google::protobuf::internal::kEmptyString) {
    delete cli_ver_;
  }
  if (cli_ver) {
    set_has_cli_ver();
    cli_ver_ = cli_ver;
  } else {
    clear_has_cli_ver();
    cli_ver_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes ticket = 3;
inline bool ProSyn::has_ticket() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProSyn::set_has_ticket() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProSyn::clear_has_ticket() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProSyn::clear_ticket() {
  if (ticket_ != &::google::protobuf::internal::kEmptyString) {
    ticket_->clear();
  }
  clear_has_ticket();
}
inline const ::std::string& ProSyn::ticket() const {
  return *ticket_;
}
inline void ProSyn::set_ticket(const ::std::string& value) {
  set_has_ticket();
  if (ticket_ == &::google::protobuf::internal::kEmptyString) {
    ticket_ = new ::std::string;
  }
  ticket_->assign(value);
}
inline void ProSyn::set_ticket(const char* value) {
  set_has_ticket();
  if (ticket_ == &::google::protobuf::internal::kEmptyString) {
    ticket_ = new ::std::string;
  }
  ticket_->assign(value);
}
inline void ProSyn::set_ticket(const void* value, size_t size) {
  set_has_ticket();
  if (ticket_ == &::google::protobuf::internal::kEmptyString) {
    ticket_ = new ::std::string;
  }
  ticket_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProSyn::mutable_ticket() {
  set_has_ticket();
  if (ticket_ == &::google::protobuf::internal::kEmptyString) {
    ticket_ = new ::std::string;
  }
  return ticket_;
}
inline ::std::string* ProSyn::release_ticket() {
  clear_has_ticket();
  if (ticket_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ticket_;
    ticket_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ProSyn::set_allocated_ticket(::std::string* ticket) {
  if (ticket_ != &::google::protobuf::internal::kEmptyString) {
    delete ticket_;
  }
  if (ticket) {
    set_has_ticket();
    ticket_ = ticket;
  } else {
    clear_has_ticket();
    ticket_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .ExtCliData ext = 1001;
inline int ProSyn::ext_size() const {
  return ext_.size();
}
inline void ProSyn::clear_ext() {
  ext_.Clear();
}
inline const ::ExtCliData& ProSyn::ext(int index) const {
  return ext_.Get(index);
}
inline ::ExtCliData* ProSyn::mutable_ext(int index) {
  return ext_.Mutable(index);
}
inline ::ExtCliData* ProSyn::add_ext() {
  return ext_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ExtCliData >&
ProSyn::ext() const {
  return ext_;
}
inline ::google::protobuf::RepeatedPtrField< ::ExtCliData >*
ProSyn::mutable_ext() {
  return &ext_;
}

// -------------------------------------------------------------------

// ProSynOk

// optional int32 cli_tp = 1;
inline bool ProSynOk::has_cli_tp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProSynOk::set_has_cli_tp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProSynOk::clear_has_cli_tp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProSynOk::clear_cli_tp() {
  cli_tp_ = 0;
  clear_has_cli_tp();
}
inline ::google::protobuf::int32 ProSynOk::cli_tp() const {
  return cli_tp_;
}
inline void ProSynOk::set_cli_tp(::google::protobuf::int32 value) {
  set_has_cli_tp();
  cli_tp_ = value;
}

// optional bytes cli_ver = 2;
inline bool ProSynOk::has_cli_ver() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProSynOk::set_has_cli_ver() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProSynOk::clear_has_cli_ver() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProSynOk::clear_cli_ver() {
  if (cli_ver_ != &::google::protobuf::internal::kEmptyString) {
    cli_ver_->clear();
  }
  clear_has_cli_ver();
}
inline const ::std::string& ProSynOk::cli_ver() const {
  return *cli_ver_;
}
inline void ProSynOk::set_cli_ver(const ::std::string& value) {
  set_has_cli_ver();
  if (cli_ver_ == &::google::protobuf::internal::kEmptyString) {
    cli_ver_ = new ::std::string;
  }
  cli_ver_->assign(value);
}
inline void ProSynOk::set_cli_ver(const char* value) {
  set_has_cli_ver();
  if (cli_ver_ == &::google::protobuf::internal::kEmptyString) {
    cli_ver_ = new ::std::string;
  }
  cli_ver_->assign(value);
}
inline void ProSynOk::set_cli_ver(const void* value, size_t size) {
  set_has_cli_ver();
  if (cli_ver_ == &::google::protobuf::internal::kEmptyString) {
    cli_ver_ = new ::std::string;
  }
  cli_ver_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProSynOk::mutable_cli_ver() {
  set_has_cli_ver();
  if (cli_ver_ == &::google::protobuf::internal::kEmptyString) {
    cli_ver_ = new ::std::string;
  }
  return cli_ver_;
}
inline ::std::string* ProSynOk::release_cli_ver() {
  clear_has_cli_ver();
  if (cli_ver_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = cli_ver_;
    cli_ver_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ProSynOk::set_allocated_cli_ver(::std::string* cli_ver) {
  if (cli_ver_ != &::google::protobuf::internal::kEmptyString) {
    delete cli_ver_;
  }
  if (cli_ver) {
    set_has_cli_ver();
    cli_ver_ = cli_ver;
  } else {
    clear_has_cli_ver();
    cli_ver_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .ExtCliData ext = 1001;
inline int ProSynOk::ext_size() const {
  return ext_.size();
}
inline void ProSynOk::clear_ext() {
  ext_.Clear();
}
inline const ::ExtCliData& ProSynOk::ext(int index) const {
  return ext_.Get(index);
}
inline ::ExtCliData* ProSynOk::mutable_ext(int index) {
  return ext_.Mutable(index);
}
inline ::ExtCliData* ProSynOk::add_ext() {
  return ext_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ExtCliData >&
ProSynOk::ext() const {
  return ext_;
}
inline ::google::protobuf::RepeatedPtrField< ::ExtCliData >*
ProSynOk::mutable_ext() {
  return &ext_;
}

// -------------------------------------------------------------------

// ProFin

// -------------------------------------------------------------------

// ProGateCut

// -------------------------------------------------------------------

// ProReset

// -------------------------------------------------------------------

// MsgData_Entry

// required int32 type = 1;
inline bool MsgData_Entry::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgData_Entry::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgData_Entry::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgData_Entry::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 MsgData_Entry::type() const {
  return type_;
}
inline void MsgData_Entry::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// required bytes data = 2;
inline bool MsgData_Entry::has_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgData_Entry::set_has_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgData_Entry::clear_has_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgData_Entry::clear_data() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    data_->clear();
  }
  clear_has_data();
}
inline const ::std::string& MsgData_Entry::data() const {
  return *data_;
}
inline void MsgData_Entry::set_data(const ::std::string& value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void MsgData_Entry::set_data(const char* value) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(value);
}
inline void MsgData_Entry::set_data(const void* value, size_t size) {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  data_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsgData_Entry::mutable_data() {
  set_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    data_ = new ::std::string;
  }
  return data_;
}
inline ::std::string* MsgData_Entry::release_data() {
  clear_has_data();
  if (data_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = data_;
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MsgData_Entry::set_allocated_data(::std::string* data) {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (data) {
    set_has_data();
    data_ = data;
  } else {
    clear_has_data();
    data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// MsgData

// repeated .MsgData.Entry entrys = 1;
inline int MsgData::entrys_size() const {
  return entrys_.size();
}
inline void MsgData::clear_entrys() {
  entrys_.Clear();
}
inline const ::MsgData_Entry& MsgData::entrys(int index) const {
  return entrys_.Get(index);
}
inline ::MsgData_Entry* MsgData::mutable_entrys(int index) {
  return entrys_.Mutable(index);
}
inline ::MsgData_Entry* MsgData::add_entrys() {
  return entrys_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MsgData_Entry >&
MsgData::entrys() const {
  return entrys_;
}
inline ::google::protobuf::RepeatedPtrField< ::MsgData_Entry >*
MsgData::mutable_entrys() {
  return &entrys_;
}

// -------------------------------------------------------------------

// ProUnreMsg

// optional int32 comp_tp = 1;
inline bool ProUnreMsg::has_comp_tp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProUnreMsg::set_has_comp_tp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProUnreMsg::clear_has_comp_tp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProUnreMsg::clear_comp_tp() {
  comp_tp_ = 0;
  clear_has_comp_tp();
}
inline ::google::protobuf::int32 ProUnreMsg::comp_tp() const {
  return comp_tp_;
}
inline void ProUnreMsg::set_comp_tp(::google::protobuf::int32 value) {
  set_has_comp_tp();
  comp_tp_ = value;
}

// optional bytes msgs = 2;
inline bool ProUnreMsg::has_msgs() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProUnreMsg::set_has_msgs() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProUnreMsg::clear_has_msgs() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProUnreMsg::clear_msgs() {
  if (msgs_ != &::google::protobuf::internal::kEmptyString) {
    msgs_->clear();
  }
  clear_has_msgs();
}
inline const ::std::string& ProUnreMsg::msgs() const {
  return *msgs_;
}
inline void ProUnreMsg::set_msgs(const ::std::string& value) {
  set_has_msgs();
  if (msgs_ == &::google::protobuf::internal::kEmptyString) {
    msgs_ = new ::std::string;
  }
  msgs_->assign(value);
}
inline void ProUnreMsg::set_msgs(const char* value) {
  set_has_msgs();
  if (msgs_ == &::google::protobuf::internal::kEmptyString) {
    msgs_ = new ::std::string;
  }
  msgs_->assign(value);
}
inline void ProUnreMsg::set_msgs(const void* value, size_t size) {
  set_has_msgs();
  if (msgs_ == &::google::protobuf::internal::kEmptyString) {
    msgs_ = new ::std::string;
  }
  msgs_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProUnreMsg::mutable_msgs() {
  set_has_msgs();
  if (msgs_ == &::google::protobuf::internal::kEmptyString) {
    msgs_ = new ::std::string;
  }
  return msgs_;
}
inline ::std::string* ProUnreMsg::release_msgs() {
  clear_has_msgs();
  if (msgs_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msgs_;
    msgs_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ProUnreMsg::set_allocated_msgs(::std::string* msgs) {
  if (msgs_ != &::google::protobuf::internal::kEmptyString) {
    delete msgs_;
  }
  if (msgs) {
    set_has_msgs();
    msgs_ = msgs;
  } else {
    clear_has_msgs();
    msgs_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ProReMsg

// optional int32 comp_tp = 1;
inline bool ProReMsg::has_comp_tp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProReMsg::set_has_comp_tp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProReMsg::clear_has_comp_tp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProReMsg::clear_comp_tp() {
  comp_tp_ = 0;
  clear_has_comp_tp();
}
inline ::google::protobuf::int32 ProReMsg::comp_tp() const {
  return comp_tp_;
}
inline void ProReMsg::set_comp_tp(::google::protobuf::int32 value) {
  set_has_comp_tp();
  comp_tp_ = value;
}

// optional bytes msgs = 2;
inline bool ProReMsg::has_msgs() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProReMsg::set_has_msgs() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProReMsg::clear_has_msgs() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProReMsg::clear_msgs() {
  if (msgs_ != &::google::protobuf::internal::kEmptyString) {
    msgs_->clear();
  }
  clear_has_msgs();
}
inline const ::std::string& ProReMsg::msgs() const {
  return *msgs_;
}
inline void ProReMsg::set_msgs(const ::std::string& value) {
  set_has_msgs();
  if (msgs_ == &::google::protobuf::internal::kEmptyString) {
    msgs_ = new ::std::string;
  }
  msgs_->assign(value);
}
inline void ProReMsg::set_msgs(const char* value) {
  set_has_msgs();
  if (msgs_ == &::google::protobuf::internal::kEmptyString) {
    msgs_ = new ::std::string;
  }
  msgs_->assign(value);
}
inline void ProReMsg::set_msgs(const void* value, size_t size) {
  set_has_msgs();
  if (msgs_ == &::google::protobuf::internal::kEmptyString) {
    msgs_ = new ::std::string;
  }
  msgs_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ProReMsg::mutable_msgs() {
  set_has_msgs();
  if (msgs_ == &::google::protobuf::internal::kEmptyString) {
    msgs_ = new ::std::string;
  }
  return msgs_;
}
inline ::std::string* ProReMsg::release_msgs() {
  clear_has_msgs();
  if (msgs_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = msgs_;
    msgs_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ProReMsg::set_allocated_msgs(::std::string* msgs) {
  if (msgs_ != &::google::protobuf::internal::kEmptyString) {
    delete msgs_;
  }
  if (msgs) {
    set_has_msgs();
    msgs_ = msgs;
  } else {
    clear_has_msgs();
    msgs_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ProHead_ProType>() {
  return ::ProHead_ProType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_tst_2eproto__INCLUDED
