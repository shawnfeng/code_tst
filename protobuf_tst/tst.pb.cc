// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tst.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "tst.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* ProHead_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProHead_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ProHead_ProType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* ExtCliData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExtCliData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProSyn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProSyn_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProSynOk_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProSynOk_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProFin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProFin_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProGateCut_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProGateCut_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProReset_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProReset_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgData_reflection_ = NULL;
const ::google::protobuf::Descriptor* MsgData_Entry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgData_Entry_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProUnreMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProUnreMsg_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProReMsg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProReMsg_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_tst_2eproto() {
  protobuf_AddDesc_tst_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "tst.proto");
  GOOGLE_CHECK(file != NULL);
  ProHead_descriptor_ = file->message_type(0);
  static const int ProHead_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProHead, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProHead, conn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProHead, sid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProHead, rid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProHead, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProHead, sub_pro_),
  };
  ProHead_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProHead_descriptor_,
      ProHead::default_instance_,
      ProHead_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProHead, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProHead, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProHead));
  ProHead_ProType_descriptor_ = ProHead_descriptor_->enum_type(0);
  ExtCliData_descriptor_ = file->message_type(1);
  static const int ExtCliData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtCliData, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtCliData, value_),
  };
  ExtCliData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExtCliData_descriptor_,
      ExtCliData::default_instance_,
      ExtCliData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtCliData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExtCliData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExtCliData));
  ProSyn_descriptor_ = file->message_type(2);
  static const int ProSyn_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProSyn, cli_tp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProSyn, cli_ver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProSyn, ticket_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProSyn, ext_),
  };
  ProSyn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProSyn_descriptor_,
      ProSyn::default_instance_,
      ProSyn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProSyn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProSyn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProSyn));
  ProSynOk_descriptor_ = file->message_type(3);
  static const int ProSynOk_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProSynOk, cli_tp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProSynOk, cli_ver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProSynOk, ext_),
  };
  ProSynOk_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProSynOk_descriptor_,
      ProSynOk::default_instance_,
      ProSynOk_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProSynOk, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProSynOk, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProSynOk));
  ProFin_descriptor_ = file->message_type(4);
  static const int ProFin_offsets_[1] = {
  };
  ProFin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProFin_descriptor_,
      ProFin::default_instance_,
      ProFin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProFin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProFin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProFin));
  ProGateCut_descriptor_ = file->message_type(5);
  static const int ProGateCut_offsets_[1] = {
  };
  ProGateCut_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProGateCut_descriptor_,
      ProGateCut::default_instance_,
      ProGateCut_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGateCut, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProGateCut, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProGateCut));
  ProReset_descriptor_ = file->message_type(6);
  static const int ProReset_offsets_[1] = {
  };
  ProReset_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProReset_descriptor_,
      ProReset::default_instance_,
      ProReset_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProReset, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProReset, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProReset));
  MsgData_descriptor_ = file->message_type(7);
  static const int MsgData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgData, entrys_),
  };
  MsgData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgData_descriptor_,
      MsgData::default_instance_,
      MsgData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgData));
  MsgData_Entry_descriptor_ = MsgData_descriptor_->nested_type(0);
  static const int MsgData_Entry_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgData_Entry, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgData_Entry, data_),
  };
  MsgData_Entry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MsgData_Entry_descriptor_,
      MsgData_Entry::default_instance_,
      MsgData_Entry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgData_Entry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgData_Entry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MsgData_Entry));
  ProUnreMsg_descriptor_ = file->message_type(8);
  static const int ProUnreMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProUnreMsg, comp_tp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProUnreMsg, msgs_),
  };
  ProUnreMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProUnreMsg_descriptor_,
      ProUnreMsg::default_instance_,
      ProUnreMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProUnreMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProUnreMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProUnreMsg));
  ProReMsg_descriptor_ = file->message_type(9);
  static const int ProReMsg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProReMsg, comp_tp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProReMsg, msgs_),
  };
  ProReMsg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProReMsg_descriptor_,
      ProReMsg::default_instance_,
      ProReMsg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProReMsg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProReMsg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProReMsg));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_tst_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProHead_descriptor_, &ProHead::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExtCliData_descriptor_, &ExtCliData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProSyn_descriptor_, &ProSyn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProSynOk_descriptor_, &ProSynOk::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProFin_descriptor_, &ProFin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProGateCut_descriptor_, &ProGateCut::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProReset_descriptor_, &ProReset::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgData_descriptor_, &MsgData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MsgData_Entry_descriptor_, &MsgData_Entry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProUnreMsg_descriptor_, &ProUnreMsg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProReMsg_descriptor_, &ProReMsg::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_tst_2eproto() {
  delete ProHead::default_instance_;
  delete ProHead_reflection_;
  delete ExtCliData::default_instance_;
  delete ExtCliData_reflection_;
  delete ProSyn::default_instance_;
  delete ProSyn_reflection_;
  delete ProSynOk::default_instance_;
  delete ProSynOk_reflection_;
  delete ProFin::default_instance_;
  delete ProFin_reflection_;
  delete ProGateCut::default_instance_;
  delete ProGateCut_reflection_;
  delete ProReset::default_instance_;
  delete ProReset_reflection_;
  delete MsgData::default_instance_;
  delete MsgData_reflection_;
  delete MsgData_Entry::default_instance_;
  delete MsgData_Entry_reflection_;
  delete ProUnreMsg::default_instance_;
  delete ProUnreMsg_reflection_;
  delete ProReMsg::default_instance_;
  delete ProReMsg_reflection_;
}

void protobuf_AddDesc_tst_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\ttst.proto\"\355\001\n\007ProHead\022\014\n\004type\030\001 \002(\005\022\014\n"
    "\004conn\030\002 \001(\003\022\013\n\003sid\030\003 \001(\005\022\013\n\003rid\030\004 \001(\005\022\013\n"
    "\003uid\030\005 \001(\003\022\020\n\007sub_pro\030\351\007 \001(\014\"\214\001\n\007ProType"
    "\022\014\n\010TYPE_SYN\020\001\022\016\n\nTYPE_SYNOK\020\002\022\014\n\010TYPE_F"
    "IN\020\003\022\016\n\nTYPE_RESET\020\004\022\021\n\rTYPE_GATE_CUT\020\005\022"
    "\016\n\nTYPE_UPIDX\020\006\022\017\n\013TYPE_RE_MSG\020\007\022\021\n\rTYPE"
    "_UNRE_MSG\020\010\"(\n\nExtCliData\022\013\n\003key\030\001 \002(\t\022\r"
    "\n\005value\030\002 \002(\014\"T\n\006ProSyn\022\016\n\006cli_tp\030\001 \001(\005\022"
    "\017\n\007cli_ver\030\002 \001(\014\022\016\n\006ticket\030\003 \001(\014\022\031\n\003ext\030"
    "\351\007 \003(\0132\013.ExtCliData\"F\n\010ProSynOk\022\016\n\006cli_t"
    "p\030\001 \001(\005\022\017\n\007cli_ver\030\002 \001(\014\022\031\n\003ext\030\351\007 \003(\0132\013"
    ".ExtCliData\"\010\n\006ProFin\"\014\n\nProGateCut\"\n\n\010P"
    "roReset\"N\n\007MsgData\022\036\n\006entrys\030\001 \003(\0132\016.Msg"
    "Data.Entry\032#\n\005Entry\022\014\n\004type\030\001 \002(\005\022\014\n\004dat"
    "a\030\002 \002(\014\"+\n\nProUnreMsg\022\017\n\007comp_tp\030\001 \001(\005\022\014"
    "\n\004msgs\030\002 \001(\014\")\n\010ProReMsg\022\017\n\007comp_tp\030\001 \001("
    "\005\022\014\n\004msgs\030\002 \001(\014", 655);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "tst.proto", &protobuf_RegisterTypes);
  ProHead::default_instance_ = new ProHead();
  ExtCliData::default_instance_ = new ExtCliData();
  ProSyn::default_instance_ = new ProSyn();
  ProSynOk::default_instance_ = new ProSynOk();
  ProFin::default_instance_ = new ProFin();
  ProGateCut::default_instance_ = new ProGateCut();
  ProReset::default_instance_ = new ProReset();
  MsgData::default_instance_ = new MsgData();
  MsgData_Entry::default_instance_ = new MsgData_Entry();
  ProUnreMsg::default_instance_ = new ProUnreMsg();
  ProReMsg::default_instance_ = new ProReMsg();
  ProHead::default_instance_->InitAsDefaultInstance();
  ExtCliData::default_instance_->InitAsDefaultInstance();
  ProSyn::default_instance_->InitAsDefaultInstance();
  ProSynOk::default_instance_->InitAsDefaultInstance();
  ProFin::default_instance_->InitAsDefaultInstance();
  ProGateCut::default_instance_->InitAsDefaultInstance();
  ProReset::default_instance_->InitAsDefaultInstance();
  MsgData::default_instance_->InitAsDefaultInstance();
  MsgData_Entry::default_instance_->InitAsDefaultInstance();
  ProUnreMsg::default_instance_->InitAsDefaultInstance();
  ProReMsg::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_tst_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_tst_2eproto {
  StaticDescriptorInitializer_tst_2eproto() {
    protobuf_AddDesc_tst_2eproto();
  }
} static_descriptor_initializer_tst_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* ProHead_ProType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProHead_ProType_descriptor_;
}
bool ProHead_ProType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const ProHead_ProType ProHead::TYPE_SYN;
const ProHead_ProType ProHead::TYPE_SYNOK;
const ProHead_ProType ProHead::TYPE_FIN;
const ProHead_ProType ProHead::TYPE_RESET;
const ProHead_ProType ProHead::TYPE_GATE_CUT;
const ProHead_ProType ProHead::TYPE_UPIDX;
const ProHead_ProType ProHead::TYPE_RE_MSG;
const ProHead_ProType ProHead::TYPE_UNRE_MSG;
const ProHead_ProType ProHead::ProType_MIN;
const ProHead_ProType ProHead::ProType_MAX;
const int ProHead::ProType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int ProHead::kTypeFieldNumber;
const int ProHead::kConnFieldNumber;
const int ProHead::kSidFieldNumber;
const int ProHead::kRidFieldNumber;
const int ProHead::kUidFieldNumber;
const int ProHead::kSubProFieldNumber;
#endif  // !_MSC_VER

ProHead::ProHead()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProHead::InitAsDefaultInstance() {
}

ProHead::ProHead(const ProHead& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProHead::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  conn_ = GOOGLE_LONGLONG(0);
  sid_ = 0;
  rid_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  sub_pro_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProHead::~ProHead() {
  SharedDtor();
}

void ProHead::SharedDtor() {
  if (sub_pro_ != &::google::protobuf::internal::kEmptyString) {
    delete sub_pro_;
  }
  if (this != default_instance_) {
  }
}

void ProHead::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProHead::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProHead_descriptor_;
}

const ProHead& ProHead::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tst_2eproto();
  return *default_instance_;
}

ProHead* ProHead::default_instance_ = NULL;

ProHead* ProHead::New() const {
  return new ProHead;
}

void ProHead::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    conn_ = GOOGLE_LONGLONG(0);
    sid_ = 0;
    rid_ = 0;
    uid_ = GOOGLE_LONGLONG(0);
    if (has_sub_pro()) {
      if (sub_pro_ != &::google::protobuf::internal::kEmptyString) {
        sub_pro_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProHead::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_conn;
        break;
      }

      // optional int64 conn = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_conn:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &conn_)));
          set_has_conn();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sid;
        break;
      }

      // optional int32 sid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sid_)));
          set_has_sid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_rid;
        break;
      }

      // optional int32 rid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rid_)));
          set_has_rid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_uid;
        break;
      }

      // optional int64 uid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_uid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &uid_)));
          set_has_uid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8010)) goto parse_sub_pro;
        break;
      }

      // optional bytes sub_pro = 1001;
      case 1001: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sub_pro:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sub_pro()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProHead::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int64 conn = 2;
  if (has_conn()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->conn(), output);
  }

  // optional int32 sid = 3;
  if (has_sid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sid(), output);
  }

  // optional int32 rid = 4;
  if (has_rid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->rid(), output);
  }

  // optional int64 uid = 5;
  if (has_uid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->uid(), output);
  }

  // optional bytes sub_pro = 1001;
  if (has_sub_pro()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1001, this->sub_pro(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProHead::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int64 conn = 2;
  if (has_conn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->conn(), target);
  }

  // optional int32 sid = 3;
  if (has_sid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sid(), target);
  }

  // optional int32 rid = 4;
  if (has_rid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->rid(), target);
  }

  // optional int64 uid = 5;
  if (has_uid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->uid(), target);
  }

  // optional bytes sub_pro = 1001;
  if (has_sub_pro()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1001, this->sub_pro(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProHead::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int64 conn = 2;
    if (has_conn()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->conn());
    }

    // optional int32 sid = 3;
    if (has_sid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sid());
    }

    // optional int32 rid = 4;
    if (has_rid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rid());
    }

    // optional int64 uid = 5;
    if (has_uid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->uid());
    }

    // optional bytes sub_pro = 1001;
    if (has_sub_pro()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->sub_pro());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProHead::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProHead* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProHead*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProHead::MergeFrom(const ProHead& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_conn()) {
      set_conn(from.conn());
    }
    if (from.has_sid()) {
      set_sid(from.sid());
    }
    if (from.has_rid()) {
      set_rid(from.rid());
    }
    if (from.has_uid()) {
      set_uid(from.uid());
    }
    if (from.has_sub_pro()) {
      set_sub_pro(from.sub_pro());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProHead::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProHead::CopyFrom(const ProHead& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProHead::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ProHead::Swap(ProHead* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(conn_, other->conn_);
    std::swap(sid_, other->sid_);
    std::swap(rid_, other->rid_);
    std::swap(uid_, other->uid_);
    std::swap(sub_pro_, other->sub_pro_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProHead::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProHead_descriptor_;
  metadata.reflection = ProHead_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExtCliData::kKeyFieldNumber;
const int ExtCliData::kValueFieldNumber;
#endif  // !_MSC_VER

ExtCliData::ExtCliData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExtCliData::InitAsDefaultInstance() {
}

ExtCliData::ExtCliData(const ExtCliData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExtCliData::SharedCtor() {
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExtCliData::~ExtCliData() {
  SharedDtor();
}

void ExtCliData::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void ExtCliData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExtCliData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExtCliData_descriptor_;
}

const ExtCliData& ExtCliData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tst_2eproto();
  return *default_instance_;
}

ExtCliData* ExtCliData::default_instance_ = NULL;

ExtCliData* ExtCliData::New() const {
  return new ExtCliData;
}

void ExtCliData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExtCliData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required bytes value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExtCliData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->key(), output);
  }

  // required bytes value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExtCliData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // required bytes value = 2;
  if (has_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExtCliData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // required bytes value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExtCliData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExtCliData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExtCliData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExtCliData::MergeFrom(const ExtCliData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExtCliData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExtCliData::CopyFrom(const ExtCliData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExtCliData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ExtCliData::Swap(ExtCliData* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExtCliData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExtCliData_descriptor_;
  metadata.reflection = ExtCliData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProSyn::kCliTpFieldNumber;
const int ProSyn::kCliVerFieldNumber;
const int ProSyn::kTicketFieldNumber;
const int ProSyn::kExtFieldNumber;
#endif  // !_MSC_VER

ProSyn::ProSyn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProSyn::InitAsDefaultInstance() {
}

ProSyn::ProSyn(const ProSyn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProSyn::SharedCtor() {
  _cached_size_ = 0;
  cli_tp_ = 0;
  cli_ver_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ticket_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProSyn::~ProSyn() {
  SharedDtor();
}

void ProSyn::SharedDtor() {
  if (cli_ver_ != &::google::protobuf::internal::kEmptyString) {
    delete cli_ver_;
  }
  if (ticket_ != &::google::protobuf::internal::kEmptyString) {
    delete ticket_;
  }
  if (this != default_instance_) {
  }
}

void ProSyn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProSyn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProSyn_descriptor_;
}

const ProSyn& ProSyn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tst_2eproto();
  return *default_instance_;
}

ProSyn* ProSyn::default_instance_ = NULL;

ProSyn* ProSyn::New() const {
  return new ProSyn;
}

void ProSyn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cli_tp_ = 0;
    if (has_cli_ver()) {
      if (cli_ver_ != &::google::protobuf::internal::kEmptyString) {
        cli_ver_->clear();
      }
    }
    if (has_ticket()) {
      if (ticket_ != &::google::protobuf::internal::kEmptyString) {
        ticket_->clear();
      }
    }
  }
  ext_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProSyn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cli_tp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cli_tp_)));
          set_has_cli_tp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cli_ver;
        break;
      }

      // optional bytes cli_ver = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cli_ver:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cli_ver()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ticket;
        break;
      }

      // optional bytes ticket = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ticket:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_ticket()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8010)) goto parse_ext;
        break;
      }

      // repeated .ExtCliData ext = 1001;
      case 1001: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ext:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ext()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8010)) goto parse_ext;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProSyn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 cli_tp = 1;
  if (has_cli_tp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cli_tp(), output);
  }

  // optional bytes cli_ver = 2;
  if (has_cli_ver()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->cli_ver(), output);
  }

  // optional bytes ticket = 3;
  if (has_ticket()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->ticket(), output);
  }

  // repeated .ExtCliData ext = 1001;
  for (int i = 0; i < this->ext_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1001, this->ext(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProSyn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 cli_tp = 1;
  if (has_cli_tp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cli_tp(), target);
  }

  // optional bytes cli_ver = 2;
  if (has_cli_ver()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->cli_ver(), target);
  }

  // optional bytes ticket = 3;
  if (has_ticket()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->ticket(), target);
  }

  // repeated .ExtCliData ext = 1001;
  for (int i = 0; i < this->ext_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1001, this->ext(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProSyn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 cli_tp = 1;
    if (has_cli_tp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cli_tp());
    }

    // optional bytes cli_ver = 2;
    if (has_cli_ver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->cli_ver());
    }

    // optional bytes ticket = 3;
    if (has_ticket()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->ticket());
    }

  }
  // repeated .ExtCliData ext = 1001;
  total_size += 2 * this->ext_size();
  for (int i = 0; i < this->ext_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ext(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProSyn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProSyn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProSyn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProSyn::MergeFrom(const ProSyn& from) {
  GOOGLE_CHECK_NE(&from, this);
  ext_.MergeFrom(from.ext_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cli_tp()) {
      set_cli_tp(from.cli_tp());
    }
    if (from.has_cli_ver()) {
      set_cli_ver(from.cli_ver());
    }
    if (from.has_ticket()) {
      set_ticket(from.ticket());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProSyn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProSyn::CopyFrom(const ProSyn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProSyn::IsInitialized() const {

  for (int i = 0; i < ext_size(); i++) {
    if (!this->ext(i).IsInitialized()) return false;
  }
  return true;
}

void ProSyn::Swap(ProSyn* other) {
  if (other != this) {
    std::swap(cli_tp_, other->cli_tp_);
    std::swap(cli_ver_, other->cli_ver_);
    std::swap(ticket_, other->ticket_);
    ext_.Swap(&other->ext_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProSyn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProSyn_descriptor_;
  metadata.reflection = ProSyn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProSynOk::kCliTpFieldNumber;
const int ProSynOk::kCliVerFieldNumber;
const int ProSynOk::kExtFieldNumber;
#endif  // !_MSC_VER

ProSynOk::ProSynOk()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProSynOk::InitAsDefaultInstance() {
}

ProSynOk::ProSynOk(const ProSynOk& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProSynOk::SharedCtor() {
  _cached_size_ = 0;
  cli_tp_ = 0;
  cli_ver_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProSynOk::~ProSynOk() {
  SharedDtor();
}

void ProSynOk::SharedDtor() {
  if (cli_ver_ != &::google::protobuf::internal::kEmptyString) {
    delete cli_ver_;
  }
  if (this != default_instance_) {
  }
}

void ProSynOk::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProSynOk::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProSynOk_descriptor_;
}

const ProSynOk& ProSynOk::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tst_2eproto();
  return *default_instance_;
}

ProSynOk* ProSynOk::default_instance_ = NULL;

ProSynOk* ProSynOk::New() const {
  return new ProSynOk;
}

void ProSynOk::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cli_tp_ = 0;
    if (has_cli_ver()) {
      if (cli_ver_ != &::google::protobuf::internal::kEmptyString) {
        cli_ver_->clear();
      }
    }
  }
  ext_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProSynOk::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cli_tp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cli_tp_)));
          set_has_cli_tp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cli_ver;
        break;
      }

      // optional bytes cli_ver = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cli_ver:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cli_ver()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8010)) goto parse_ext;
        break;
      }

      // repeated .ExtCliData ext = 1001;
      case 1001: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ext:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ext()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8010)) goto parse_ext;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProSynOk::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 cli_tp = 1;
  if (has_cli_tp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cli_tp(), output);
  }

  // optional bytes cli_ver = 2;
  if (has_cli_ver()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->cli_ver(), output);
  }

  // repeated .ExtCliData ext = 1001;
  for (int i = 0; i < this->ext_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1001, this->ext(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProSynOk::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 cli_tp = 1;
  if (has_cli_tp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cli_tp(), target);
  }

  // optional bytes cli_ver = 2;
  if (has_cli_ver()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->cli_ver(), target);
  }

  // repeated .ExtCliData ext = 1001;
  for (int i = 0; i < this->ext_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1001, this->ext(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProSynOk::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 cli_tp = 1;
    if (has_cli_tp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cli_tp());
    }

    // optional bytes cli_ver = 2;
    if (has_cli_ver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->cli_ver());
    }

  }
  // repeated .ExtCliData ext = 1001;
  total_size += 2 * this->ext_size();
  for (int i = 0; i < this->ext_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ext(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProSynOk::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProSynOk* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProSynOk*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProSynOk::MergeFrom(const ProSynOk& from) {
  GOOGLE_CHECK_NE(&from, this);
  ext_.MergeFrom(from.ext_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cli_tp()) {
      set_cli_tp(from.cli_tp());
    }
    if (from.has_cli_ver()) {
      set_cli_ver(from.cli_ver());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProSynOk::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProSynOk::CopyFrom(const ProSynOk& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProSynOk::IsInitialized() const {

  for (int i = 0; i < ext_size(); i++) {
    if (!this->ext(i).IsInitialized()) return false;
  }
  return true;
}

void ProSynOk::Swap(ProSynOk* other) {
  if (other != this) {
    std::swap(cli_tp_, other->cli_tp_);
    std::swap(cli_ver_, other->cli_ver_);
    ext_.Swap(&other->ext_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProSynOk::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProSynOk_descriptor_;
  metadata.reflection = ProSynOk_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ProFin::ProFin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProFin::InitAsDefaultInstance() {
}

ProFin::ProFin(const ProFin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProFin::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProFin::~ProFin() {
  SharedDtor();
}

void ProFin::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProFin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProFin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProFin_descriptor_;
}

const ProFin& ProFin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tst_2eproto();
  return *default_instance_;
}

ProFin* ProFin::default_instance_ = NULL;

ProFin* ProFin::New() const {
  return new ProFin;
}

void ProFin::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProFin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ProFin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProFin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProFin::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProFin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProFin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProFin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProFin::MergeFrom(const ProFin& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProFin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProFin::CopyFrom(const ProFin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProFin::IsInitialized() const {

  return true;
}

void ProFin::Swap(ProFin* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProFin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProFin_descriptor_;
  metadata.reflection = ProFin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ProGateCut::ProGateCut()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProGateCut::InitAsDefaultInstance() {
}

ProGateCut::ProGateCut(const ProGateCut& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProGateCut::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProGateCut::~ProGateCut() {
  SharedDtor();
}

void ProGateCut::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProGateCut::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProGateCut::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProGateCut_descriptor_;
}

const ProGateCut& ProGateCut::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tst_2eproto();
  return *default_instance_;
}

ProGateCut* ProGateCut::default_instance_ = NULL;

ProGateCut* ProGateCut::New() const {
  return new ProGateCut;
}

void ProGateCut::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProGateCut::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ProGateCut::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProGateCut::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProGateCut::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProGateCut::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProGateCut* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProGateCut*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProGateCut::MergeFrom(const ProGateCut& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProGateCut::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProGateCut::CopyFrom(const ProGateCut& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProGateCut::IsInitialized() const {

  return true;
}

void ProGateCut::Swap(ProGateCut* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProGateCut::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProGateCut_descriptor_;
  metadata.reflection = ProGateCut_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ProReset::ProReset()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProReset::InitAsDefaultInstance() {
}

ProReset::ProReset(const ProReset& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProReset::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProReset::~ProReset() {
  SharedDtor();
}

void ProReset::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProReset::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProReset::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProReset_descriptor_;
}

const ProReset& ProReset::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tst_2eproto();
  return *default_instance_;
}

ProReset* ProReset::default_instance_ = NULL;

ProReset* ProReset::New() const {
  return new ProReset;
}

void ProReset::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProReset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ProReset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProReset::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProReset::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProReset::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProReset* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProReset*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProReset::MergeFrom(const ProReset& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProReset::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProReset::CopyFrom(const ProReset& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProReset::IsInitialized() const {

  return true;
}

void ProReset::Swap(ProReset* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProReset::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProReset_descriptor_;
  metadata.reflection = ProReset_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MsgData_Entry::kTypeFieldNumber;
const int MsgData_Entry::kDataFieldNumber;
#endif  // !_MSC_VER

MsgData_Entry::MsgData_Entry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgData_Entry::InitAsDefaultInstance() {
}

MsgData_Entry::MsgData_Entry(const MsgData_Entry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgData_Entry::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgData_Entry::~MsgData_Entry() {
  SharedDtor();
}

void MsgData_Entry::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void MsgData_Entry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgData_Entry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgData_Entry_descriptor_;
}

const MsgData_Entry& MsgData_Entry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tst_2eproto();
  return *default_instance_;
}

MsgData_Entry* MsgData_Entry::default_instance_ = NULL;

MsgData_Entry* MsgData_Entry::New() const {
  return new MsgData_Entry;
}

void MsgData_Entry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgData_Entry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // required bytes data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgData_Entry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // required bytes data = 2;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgData_Entry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // required bytes data = 2;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgData_Entry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required bytes data = 2;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgData_Entry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgData_Entry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgData_Entry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgData_Entry::MergeFrom(const MsgData_Entry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgData_Entry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgData_Entry::CopyFrom(const MsgData_Entry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgData_Entry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MsgData_Entry::Swap(MsgData_Entry* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgData_Entry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgData_Entry_descriptor_;
  metadata.reflection = MsgData_Entry_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int MsgData::kEntrysFieldNumber;
#endif  // !_MSC_VER

MsgData::MsgData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MsgData::InitAsDefaultInstance() {
}

MsgData::MsgData(const MsgData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MsgData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgData::~MsgData() {
  SharedDtor();
}

void MsgData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgData_descriptor_;
}

const MsgData& MsgData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tst_2eproto();
  return *default_instance_;
}

MsgData* MsgData::default_instance_ = NULL;

MsgData* MsgData::New() const {
  return new MsgData;
}

void MsgData::Clear() {
  entrys_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MsgData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MsgData.Entry entrys = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_entrys:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_entrys()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_entrys;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MsgData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .MsgData.Entry entrys = 1;
  for (int i = 0; i < this->entrys_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->entrys(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MsgData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .MsgData.Entry entrys = 1;
  for (int i = 0; i < this->entrys_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->entrys(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MsgData::ByteSize() const {
  int total_size = 0;

  // repeated .MsgData.Entry entrys = 1;
  total_size += 1 * this->entrys_size();
  for (int i = 0; i < this->entrys_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->entrys(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MsgData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MsgData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MsgData::MergeFrom(const MsgData& from) {
  GOOGLE_CHECK_NE(&from, this);
  entrys_.MergeFrom(from.entrys_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MsgData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgData::CopyFrom(const MsgData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgData::IsInitialized() const {

  for (int i = 0; i < entrys_size(); i++) {
    if (!this->entrys(i).IsInitialized()) return false;
  }
  return true;
}

void MsgData::Swap(MsgData* other) {
  if (other != this) {
    entrys_.Swap(&other->entrys_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MsgData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgData_descriptor_;
  metadata.reflection = MsgData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProUnreMsg::kCompTpFieldNumber;
const int ProUnreMsg::kMsgsFieldNumber;
#endif  // !_MSC_VER

ProUnreMsg::ProUnreMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProUnreMsg::InitAsDefaultInstance() {
}

ProUnreMsg::ProUnreMsg(const ProUnreMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProUnreMsg::SharedCtor() {
  _cached_size_ = 0;
  comp_tp_ = 0;
  msgs_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProUnreMsg::~ProUnreMsg() {
  SharedDtor();
}

void ProUnreMsg::SharedDtor() {
  if (msgs_ != &::google::protobuf::internal::kEmptyString) {
    delete msgs_;
  }
  if (this != default_instance_) {
  }
}

void ProUnreMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProUnreMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProUnreMsg_descriptor_;
}

const ProUnreMsg& ProUnreMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tst_2eproto();
  return *default_instance_;
}

ProUnreMsg* ProUnreMsg::default_instance_ = NULL;

ProUnreMsg* ProUnreMsg::New() const {
  return new ProUnreMsg;
}

void ProUnreMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    comp_tp_ = 0;
    if (has_msgs()) {
      if (msgs_ != &::google::protobuf::internal::kEmptyString) {
        msgs_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProUnreMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 comp_tp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &comp_tp_)));
          set_has_comp_tp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_msgs;
        break;
      }

      // optional bytes msgs = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msgs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msgs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProUnreMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 comp_tp = 1;
  if (has_comp_tp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->comp_tp(), output);
  }

  // optional bytes msgs = 2;
  if (has_msgs()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->msgs(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProUnreMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 comp_tp = 1;
  if (has_comp_tp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->comp_tp(), target);
  }

  // optional bytes msgs = 2;
  if (has_msgs()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->msgs(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProUnreMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 comp_tp = 1;
    if (has_comp_tp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->comp_tp());
    }

    // optional bytes msgs = 2;
    if (has_msgs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->msgs());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProUnreMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProUnreMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProUnreMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProUnreMsg::MergeFrom(const ProUnreMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_comp_tp()) {
      set_comp_tp(from.comp_tp());
    }
    if (from.has_msgs()) {
      set_msgs(from.msgs());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProUnreMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProUnreMsg::CopyFrom(const ProUnreMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProUnreMsg::IsInitialized() const {

  return true;
}

void ProUnreMsg::Swap(ProUnreMsg* other) {
  if (other != this) {
    std::swap(comp_tp_, other->comp_tp_);
    std::swap(msgs_, other->msgs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProUnreMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProUnreMsg_descriptor_;
  metadata.reflection = ProUnreMsg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProReMsg::kCompTpFieldNumber;
const int ProReMsg::kMsgsFieldNumber;
#endif  // !_MSC_VER

ProReMsg::ProReMsg()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProReMsg::InitAsDefaultInstance() {
}

ProReMsg::ProReMsg(const ProReMsg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProReMsg::SharedCtor() {
  _cached_size_ = 0;
  comp_tp_ = 0;
  msgs_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProReMsg::~ProReMsg() {
  SharedDtor();
}

void ProReMsg::SharedDtor() {
  if (msgs_ != &::google::protobuf::internal::kEmptyString) {
    delete msgs_;
  }
  if (this != default_instance_) {
  }
}

void ProReMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProReMsg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProReMsg_descriptor_;
}

const ProReMsg& ProReMsg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_tst_2eproto();
  return *default_instance_;
}

ProReMsg* ProReMsg::default_instance_ = NULL;

ProReMsg* ProReMsg::New() const {
  return new ProReMsg;
}

void ProReMsg::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    comp_tp_ = 0;
    if (has_msgs()) {
      if (msgs_ != &::google::protobuf::internal::kEmptyString) {
        msgs_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProReMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 comp_tp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &comp_tp_)));
          set_has_comp_tp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_msgs;
        break;
      }

      // optional bytes msgs = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msgs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msgs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProReMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 comp_tp = 1;
  if (has_comp_tp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->comp_tp(), output);
  }

  // optional bytes msgs = 2;
  if (has_msgs()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->msgs(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProReMsg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 comp_tp = 1;
  if (has_comp_tp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->comp_tp(), target);
  }

  // optional bytes msgs = 2;
  if (has_msgs()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->msgs(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProReMsg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 comp_tp = 1;
    if (has_comp_tp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->comp_tp());
    }

    // optional bytes msgs = 2;
    if (has_msgs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->msgs());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProReMsg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProReMsg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProReMsg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProReMsg::MergeFrom(const ProReMsg& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_comp_tp()) {
      set_comp_tp(from.comp_tp());
    }
    if (from.has_msgs()) {
      set_msgs(from.msgs());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProReMsg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProReMsg::CopyFrom(const ProReMsg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProReMsg::IsInitialized() const {

  return true;
}

void ProReMsg::Swap(ProReMsg* other) {
  if (other != this) {
    std::swap(comp_tp_, other->comp_tp_);
    std::swap(msgs_, other->msgs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProReMsg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProReMsg_descriptor_;
  metadata.reflection = ProReMsg_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
